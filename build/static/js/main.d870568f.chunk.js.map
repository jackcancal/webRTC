{"version":3,"sources":["pages/home/index.scss","components/Button/index.scss","components/Button/index.jsx","utils/utils.js","pages/home/index.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Button","props","className","styles","button","onClick","children","downLoad","url","oA","document","createElement","download","href","body","appendChild","click","remove","Home","state","init","player","window","navigator","mediaDevices","getUserMedia","video","width","height","frameRate","facingMode","audio","then","stream","srcObject","savePicture","picture","documentElement","offsetWidth","offsetHeight","getContext","drawImage","toDataURL","this","ref","r","autoPlay","playsInline","PureComponent","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"6EACAA,EAAOC,QAAU,CAAC,MAAQ,qBAAqB,OAAS,wB,oBCAxDD,EAAOC,QAAU,CAAC,OAAS,wB,oNCQZC,MAPf,SAAgBC,GACd,OACE,yBAAKC,UAAS,UAAKC,IAAOC,OAAZ,YAAsBH,EAAMC,WAAaG,QAASJ,EAAMI,SACnEJ,EAAMK,W,gBCLN,SAASC,EAASC,GACvB,IAAMC,EAAKC,SAASC,cAAc,KAClCF,EAAGG,SAAW,QACdH,EAAGI,KAAOL,EACVE,SAASI,KAAKC,YAAYN,GAC1BA,EAAGO,QACHP,EAAGQ,S,IC2CUC,E,4MA5CbC,MAAQ,G,EAORC,KAAO,WAAO,IACJC,EADG,eACHA,OACcC,OAAdC,UACEC,aAAaC,aAAa,CAClCC,MAAO,CACLC,MAAO,IACPC,OAAQ,IACRC,UAAW,GACXC,WAAY,cAEdC,OAAO,IACNC,MAAK,SAAAC,GACNZ,EAAOa,UAAYD,M,EAGvBE,YAAY,WAAO,IAAD,iBACRC,EADQ,EACRA,QAASf,EADD,EACCA,OACjBe,EAAQT,MAAQjB,SAAS2B,gBAAgBC,YACzCF,EAAQR,OAASlB,SAAS2B,gBAAgBE,aAC1CH,EAAQI,WAAW,MAAMC,UAAUpB,EAAQ,EAAG,EAAGA,EAAOiB,YAAajB,EAAOkB,cAC5EhC,EAAS6B,EAAQM,UAAU,gB,kEAvB3BC,KAAKvB,S,+BAyBG,IAAD,OACP,OACE,6BACE,2BACElB,UAAWC,IAAOuB,MAClBkB,IAAK,SAAAC,GAAC,OAAI,EAAKxB,OAASwB,GACxBC,SAAU,EACVC,YAAa,IAEf,4BAAQH,IAAK,SAAAC,GAAC,OAAI,EAAKT,QAAUS,KACjC,kBAAC,EAAD,CAAQ3C,UAAWC,IAAOC,OAAQC,QAASsC,KAAKR,aAAhD,iC,GAxCWa,iBCOJC,MARf,WACE,OACE,yBAAK/C,UAAU,OACb,kBAAC,EAAD,QCMcgD,QACW,cAA7B5B,OAAO6B,SAASC,UAEe,UAA7B9B,OAAO6B,SAASC,UAEhB9B,OAAO6B,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF9C,SAAS+C,eAAe,SDyHpB,kBAAmBlC,WACrBA,UAAUmC,cAAcC,MACrB3B,MAAK,SAAA4B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d870568f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"video\":\"index_video__2wd7T\",\"button\":\"index_button__3plz1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"index_button__4sEsc\"};","import React from 'react'\nimport styles from './index.scss'\nfunction Button(props) {\n  return (\n    <div className={`${styles.button} ${props.className}`} onClick={props.onClick}>\n      {props.children}\n    </div>\n  )\n}\nexport default Button\n\n","export function downLoad(url) {\n  const oA = document.createElement(\"a\");\n  oA.download = 'photo';// 设置下载的文件名，默认是'下载'\n  oA.href = url;\n  document.body.appendChild(oA);\n  oA.click();\n  oA.remove(); // 下载之后把创建的元素删除\n}\n","import React, { PureComponent } from 'react'\nimport Button from \"../../components/Button\";\nimport styles from './index.scss'\nimport { downLoad } from \"../../utils/utils\";\nclass Home extends PureComponent {\n  state = {\n\n  }\n  componentDidMount() {\n    this.init()\n  }\n\n  init = () => {\n    const { player } = this\n    const { navigator } = window\n    navigator.mediaDevices.getUserMedia({\n      video: {\n        width: 640,\n        height: 480,\n        frameRate: 15,\n        facingMode: 'enviroment'\n      },\n      audio: false\n    }).then(stream => {\n      player.srcObject = stream\n    })\n  }\n  savePicture=() => {\n    const { picture, player } = this\n    picture.width = document.documentElement.offsetWidth\n    picture.height = document.documentElement.offsetHeight\n    picture.getContext('2d').drawImage(player, 0, 0, player.offsetWidth, player.offsetHeight)\n    downLoad(picture.toDataURL(\"image/jpeg\"))\n  }\n  render() {\n    return (\n      <div>\n        <video\n          className={styles.video}\n          ref={r => this.player = r}\n          autoPlay={1}\n          playsInline={1}\n        />\n        <canvas ref={r => this.picture = r} />\n        <Button className={styles.button} onClick={this.savePicture}>保存图片</Button>\n      </div>\n    )\n  }\n}\nexport default Home\n","import React from 'react';\nimport './App.css';\nimport Home from \"./pages/home\";\nfunction App() {\n  return (\n    <div className='App'>\n      <Home />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}